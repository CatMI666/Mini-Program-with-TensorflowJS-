/** MIT License
* Copyright (c) 2019 Ping Yu
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. 
*/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.tf = global.tf || {})));
}(this, (function (exports) { 'use strict';

  var TEXT_FILE_EXTS = /\.(txt|json|html|txt|csv)/;
  function parseResponse(url, res) {
      var header = res.header || {};
      header = Object.keys(header).reduce(function (map, key) {
          map[key.toLowerCase()] = header[key];
          return map;
      }, {});
      return {
          ok: ((res.statusCode / 200) | 0) === 1,
          status: res.statusCode,
          statusText: res.statusCode,
          url: url,
          clone: function () { return parseResponse(url, res); },
          text: function () {
              return Promise.resolve(typeof res.data === 'string' ? res.data : JSON.stringify(res.data));
          },
          json: function () {
              if (typeof res.data === 'object')
                  return Promise.resolve(res.data);
              var json = {};
              try {
                  json = JSON.parse(res.data);
              }
              catch (err) {
                  console.error(err);
              }
              return Promise.resolve(json);
          },
          arrayBuffer: function () {
              return Promise.resolve(res.data);
          },
          headers: {
              keys: function () { return Object.keys(header); },
              entries: function () {
                  var all = [];
                  for (var key in header) {
                      if (header.hasOwnProperty(key)) {
                          all.push([key, header[key]]);
                      }
                  }
                  return all;
              },
              get: function (n) { return header[n.toLowerCase()]; },
              has: function (n) { return n.toLowerCase() in header; }
          }
      };
  }
  function fetchFunc() {
      // tslint:disable-next-line:no-any
      return function (url, options) {
          options = options || {};
          var dataType = url.match(TEXT_FILE_EXTS) ? 'text' : 'arraybuffer';
          return new Promise(function (resolve, reject) {
              wx.request({
                  url: url,
                  method: options.method || 'GET',
                  data: options.body,
                  header: options.headers,
                  dataType: dataType,
                  responseType: dataType,
                  success: function (resp) { return resolve(parseResponse(url, resp)); },
                  fail: function (err) { return reject(err); }
              });
          });
      };
  }
  function setWechatFetch(debug) {
      if (debug === void 0) { debug = false; }
      // tslint:disable-next-line:no-any
      var typedGlobal = global;
      if (typeof typedGlobal.fetch !== 'function') {
          if (debug) {
              console.log('setup global fetch...');
          }
          typedGlobal.fetch = fetchFunc();
      }
  }

  exports.TEXT_FILE_EXTS = TEXT_FILE_EXTS;
  exports.parseResponse = parseResponse;
  exports.fetchFunc = fetchFunc;
  exports.setWechatFetch = setWechatFetch;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=fetch_wechat.js.map
