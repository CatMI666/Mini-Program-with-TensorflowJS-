/** MIT License
* Copyright (c) 2019 Ping Yu
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE. 
*/
var TEXT_FILE_EXTS=/\.(txt|json|html|txt|csv)/;function parseResponse(e,t){var r=t.header||{};return r=Object.keys(r).reduce(function(e,t){return e[t.toLowerCase()]=r[t],e},{}),{ok:1==(t.statusCode/200|0),status:t.statusCode,statusText:t.statusCode,url:e,clone:function(){return parseResponse(e,t)},text:function(){return Promise.resolve("string"==typeof t.data?t.data:JSON.stringify(t.data))},json:function(){if("object"==typeof t.data)return Promise.resolve(t.data);var e={};try{e=JSON.parse(t.data)}catch(e){console.error(e)}return Promise.resolve(e)},arrayBuffer:function(){return Promise.resolve(t.data)},headers:{keys:function(){return Object.keys(r)},entries:function(){var e=[];for(var t in r)r.hasOwnProperty(t)&&e.push([t,r[t]]);return e},get:function(e){return r[e.toLowerCase()]},has:function(e){return e.toLowerCase()in r}}}}function fetchFunc(){return function(e,t){t=t||{};var r=e.match(TEXT_FILE_EXTS)?"text":"arraybuffer";return new Promise(function(n,o){wx.request({url:e,method:t.method||"GET",data:t.body,header:t.headers,dataType:r,responseType:r,success:function(t){return n(parseResponse(e,t))},fail:function(e){return o(e)}})})}}function setWechatFetch(e){void 0===e&&(e=!1);var t=global;"function"!=typeof t.fetch&&(e&&console.log("setup global fetch..."),t.fetch=fetchFunc())}export{TEXT_FILE_EXTS,parseResponse,fetchFunc,setWechatFetch};
//# sourceMappingURL=fetch_wechat.esm.js.map
